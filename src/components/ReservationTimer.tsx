import { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { 
  Clock, 
  MapPin, 
  AlertCircle, 
  CheckCircle, 
  XCircle,
  Zap
} from 'lucide-react';
import { Reservation, reservationService } from '../services/reservationService';
import { Alert, AlertDescription } from './ui/alert';

interface ReservationTimerProps {
  reservation: Reservation;
  onCancel?: () => void;
  onComplete?: () => void;
  onExpired?: () => void;
}

export function ReservationTimer({ 
  reservation, 
  onCancel, 
  onComplete,
  onExpired 
}: ReservationTimerProps) {
  const [currentReservation, setCurrentReservation] = useState(reservation);
  const [showNotification, setShowNotification] = useState(false);
  const [, forceUpdate] = useState(0);

  useEffect(() => {
    console.log('üîµ ReservationTimer mounted for:', reservation.id);
    
    // C·∫≠p nh·∫≠t state m·ªói gi√¢y
    const interval = setInterval(() => {
      const updated = reservationService.getReservation(reservation.id);
      if (updated) {
        console.log('üîÑ Updating reservation state:', updated.remainingTime, 'status:', updated.status);
        
        // N·∫øu status kh√¥ng c√≤n active, g·ªçi callback t∆∞∆°ng ·ª©ng v√† d·ª´ng
        if (updated.status === 'expired' && onExpired) {
          console.log('‚è∞ Reservation expired, calling onExpired');
          clearInterval(interval);
          onExpired();
          return;
        }
        
        if (updated.status === 'completed' && onComplete) {
          console.log('‚úÖ Reservation completed, calling onComplete');
          clearInterval(interval);
          onComplete();
          return;
        }
        
        if (updated.status === 'cancelled' && onCancel) {
          console.log('‚ùå Reservation cancelled, calling onCancel');
          clearInterval(interval);
          onCancel();
          return;
        }
        
        setCurrentReservation({...updated}); // T·∫°o object m·ªõi ƒë·ªÉ trigger re-render
        forceUpdate(prev => prev + 1); // Force re-render
      } else {
        console.log('‚ö†Ô∏è Reservation not found:', reservation.id);
        clearInterval(interval);
      }
    }, 1000);

    // ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o 5 ph√∫t cu·ªëi
    const handleNotification = (res: Reservation) => {
      if (res.id === reservation.id) {
        setShowNotification(true);
        // T·ª± ƒë·ªông ·∫©n sau 10 gi√¢y
        setTimeout(() => setShowNotification(false), 10000);
      }
    };

    reservationService.onNotification(handleNotification);

    return () => {
      clearInterval(interval);
    };
  }, [reservation.id, onExpired]);

  const handleCancel = () => {
    const success = reservationService.cancelReservation(reservation.id);
    if (success && onCancel) {
      onCancel();
    }
  };

  const handleComplete = () => {
    console.log('üîµ handleComplete clicked');
    const success = reservationService.completeReservation(reservation.id);
    console.log('üìä Service complete result:', success);
    if (success) {
      console.log('‚úÖ Calling onComplete callback');
      if (onComplete) {
        onComplete();
      }
    }
  };

  const isNearExpiration = reservationService.isNearExpiration(currentReservation);
  const timeString = reservationService.formatRemainingTime(currentReservation.remainingTime);

  // TEST MODE: T√≠nh ph·∫ßn trƒÉm th·ªùi gian c√≤n l·∫°i (15 gi√¢y thay v√¨ 15 ph√∫t)
  // ƒê·ªïi l·∫°i th√†nh (15 * 60) khi deploy production
  const percentage = (currentReservation.remainingTime / 15*60) * 100;

  return (
    <Card className="border-2 border-green-500 shadow-lg">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-600" />
            ƒêang gi·ªØ ch·ªó
          </CardTitle>
          <Badge 
            className={`text-sm ${
              isNearExpiration 
                ? 'bg-red-100 text-red-800' 
                : 'bg-green-100 text-green-800'
            }`}
          >
            {currentReservation.status === 'active' ? 'Active' : currentReservation.status}
          </Badge>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Notification 5 ph√∫t cu·ªëi */}
        {showNotification && isNearExpiration && (
          <Alert className="border-red-500 bg-red-50">
            <AlertCircle className="h-4 w-4 text-red-600" />
            <AlertDescription className="text-red-800 font-medium">
              ‚ö†Ô∏è C√≤n 5 ph√∫t tr∆∞·ªõc khi h·∫øt th·ªùi gian gi·ªØ ch·ªó!
            </AlertDescription>
          </Alert>
        )}

        {/* Station Info */}
        <div className="space-y-2">
          <div className="flex items-start gap-2">
            <MapPin className="w-5 h-5 text-gray-500 mt-0.5" />
            <div>
              <p className="font-semibold">{currentReservation.stationName}</p>
              <p className="text-sm text-gray-600">ID: {currentReservation.stationId}</p>
            </div>
          </div>
        </div>

        {/* Countdown Timer */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600 flex items-center gap-1">
              <Clock className="w-4 h-4" />
              Th·ªùi gian c√≤n l·∫°i:
            </span>
            <span className={`text-2xl font-bold ${
              isNearExpiration ? 'text-red-600' : 'text-green-600'
            }`}>
              {timeString}
            </span>
          </div>

          {/* Progress Bar */}
          <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
            <div
              className={`h-full transition-all duration-1000 ${
                isNearExpiration 
                  ? 'bg-gradient-to-r from-red-500 to-orange-500' 
                  : 'bg-gradient-to-r from-green-500 to-emerald-500'
              }`}
              style={{ width: `${percentage}%` }}
            />
          </div>

          <p className="text-xs text-gray-500 text-center">
            {isNearExpiration 
              ? '‚ö†Ô∏è Vui l√≤ng ƒë·∫øn tr·∫°m s·∫°c c√†ng s·ªõm c√†ng t·ªët'
              : '‚úÖ H√£y ƒë·∫øn tr·∫°m s·∫°c trong th·ªùi gian ƒë∆∞·ª£c gi·ªØ ch·ªó'
            }
          </p>
        </div>

        {/* Charging Point */}
        {currentReservation.chargingPointId && (
          <div className="flex items-center gap-2 p-2 bg-blue-50 rounded-lg">
            <Zap className="w-4 h-4 text-blue-600" />
            <span className="text-sm text-blue-800">
              ƒêi·ªÉm s·∫°c: <strong>{currentReservation.chargingPointId}</strong>
            </span>
          </div>
        )}

        {/* Actions */}
        <div className="flex gap-2 pt-2">
          <Button
            variant="outline"
            className="flex-1"
            onClick={handleCancel}
          >
            <XCircle className="w-4 h-4 mr-2" />
            H·ªßy ƒë·∫∑t ch·ªó
          </Button>
          <Button
            className="flex-1 bg-green-600 hover:bg-green-700"
            onClick={handleComplete}
          >
            <CheckCircle className="w-4 h-4 mr-2" />
            ƒê√£ ƒë·∫øn tr·∫°m
          </Button>
        </div>

        {/* Warning Text */}
        <p className="text-xs text-gray-500 text-center pt-2 border-t">
          üí° N·∫øu qu√° 15 ph√∫t, b·∫°n c·∫ßn ƒë·∫∑t ch·ªó l·∫°i t·ª´ ƒë·∫ßu
        </p>
      </CardContent>
    </Card>
  );
}

// Component hi·ªÉn th·ªã tr·∫°ng th√°i khi kh√¥ng c√≥ reservation
export function NoReservation() {
  return (
    <Card className="border-dashed border-2">
      <CardContent className="py-12 text-center">
        <Clock className="w-16 h-16 mx-auto text-gray-400 mb-4" />
        <h3 className="text-lg font-semibold text-gray-700 mb-2">
          Ch∆∞a c√≥ ch·ªó ƒë∆∞·ª£c gi·ªØ
        </h3>
        <p className="text-sm text-gray-500">
          Ch·ªçn m·ªôt tr·∫°m s·∫°c v√† nh·∫•n "ƒê·∫∑t ch·ªó" ƒë·ªÉ gi·ªØ ch·ªó trong 15 ph√∫t
        </p>
      </CardContent>
    </Card>
  );
}

// Component hi·ªÉn th·ªã khi reservation h·∫øt h·∫°n
export function ExpiredReservation({ stationName }: { stationName: string }) {
  return (
    <Card className="border-red-500 border-2">
      <CardContent className="py-8 text-center">
        <XCircle className="w-16 h-16 mx-auto text-red-500 mb-4" />
        <h3 className="text-lg font-semibold text-red-700 mb-2">
          ‚è∞ H·∫øt th·ªùi gian gi·ªØ ch·ªó
        </h3>
        <p className="text-sm text-gray-600 mb-1">
          Ch·ªó c·ªßa b·∫°n t·∫°i <strong>{stationName}</strong> ƒë√£ h·∫øt h·∫°n
        </p>
        <p className="text-sm text-gray-500">
          Vui l√≤ng ƒë·∫∑t ch·ªó l·∫°i n·∫øu b·∫°n v·∫´n mu·ªën s·ª≠ d·ª•ng tr·∫°m n√†y
        </p>
      </CardContent>
    </Card>
  );
}
