import { useEffect, useState } from 'react';
import { useSearchParams, Link, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

export default function PaymentCallback() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState<'pending' | 'completed' | 'failed' | 'error' | 'not_found'>('pending');
  const [message, setMessage] = useState<string | null>(null);
  const [countdown, setCountdown] = useState<number>(3);

  useEffect(() => {
    const orderId = searchParams.get('orderId');
    const resultCode = searchParams.get('resultCode');
    const amount = searchParams.get('amount');

    // Basic quick UX: if resultCode is present and indicates failure, show message
    if (resultCode && resultCode !== '0') {
      setStatus('failed');
      setMessage('Thanh to√°n kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
      return;
    }

    if (!orderId) {
      setStatus('error');
      setMessage('Kh√¥ng c√≥ orderId trong tham s·ªë URL.');
      return;
    }

    // Try to verify status with backend endpoint
    const verify = async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/payments/momo/status/${encodeURIComponent(orderId)}`);
        if (res.status === 404) {
          setStatus('not_found');
          setMessage('Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ng kh√¥ng t√¨m th·∫•y th√¥ng tin (404).');
          return;
        }

        const data = await res.json();
        if (!data.success) {
          setStatus('error');
          setMessage(data.error || 'Kh√¥ng th·ªÉ x√°c minh thanh to√°n.');
          return;
        }

        const st = data.data?.status;
        if (st === 'Completed') {
          setStatus('completed');
          setMessage(`Thanh to√°n th√†nh c√¥ng (${amount || ''} VND). C·∫£m ∆°n b·∫°n!`);
          
          // Show success toast
          toast.success('üéâ Thanh to√°n th√†nh c√¥ng!', {
            description: 'B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v·ªÅ trang ch·ªß sau 3 gi√¢y...'
          });
          
          // Countdown and redirect to dashboard after 3 seconds
          let timeLeft = 3;
          setCountdown(timeLeft);
          
          const countdownInterval = setInterval(() => {
            timeLeft--;
            setCountdown(timeLeft);
            
            if (timeLeft <= 0) {
              clearInterval(countdownInterval);
              navigate('/dashboard');
            }
          }, 1000);
          
          return () => clearInterval(countdownInterval);
        } else if (st === 'Pending') {
          setStatus('pending');
          setMessage('Thanh to√°n ƒëang ch·ªù x·ª≠ l√Ω. Vui l√≤ng ch·ªù v√†i gi√¢y v√† l√†m m·ªõi trang.');
        } else {
          setStatus('failed');
          setMessage('Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.');
        }
      } catch (err: any) {
        console.error('Verify error:', err);
        setStatus('error');
        setMessage('L·ªói khi li√™n h·ªá m√°y ch·ªß ƒë·ªÉ x√°c minh thanh to√°n.');
      }
    };

    verify();
  }, [searchParams]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-xl w-full bg-white shadow rounded p-6 text-center">
        <h2 className="text-2xl font-bold mb-4">K·∫øt qu·∫£ thanh to√°n</h2>

        {status === 'pending' && (
          <div>
            <p className="text-gray-700 mb-4">ƒêang x√°c minh thanh to√°n...</p>
            <div className="loader inline-block" aria-hidden />
            <p className="text-sm text-gray-500 mt-3">N·∫øu m·∫•t nhi·ªÅu th·ªùi gian, b·∫°n c√≥ th·ªÉ t·∫£i l·∫°i trang.</p>
          </div>
        )}

        {status === 'completed' && (
          <div>
            <div className="mb-4">
              <svg className="w-20 h-20 text-green-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 className="text-2xl font-bold text-green-600 mb-2">Thanh to√°n th√†nh c√¥ng!</h3>
              <p className="text-gray-700 mb-4">{message}</p>
            </div>
            
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
              <p className="text-sm text-green-800">
                ƒêang chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß trong <span className="font-bold text-xl">{countdown}</span> gi√¢y...
              </p>
            </div>
            
            <div className="flex gap-3 justify-center">
              <Link 
                to="/dashboard" 
                className="inline-block px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                V·ªÅ trang ch·ªß ngay
              </Link>
              <Link 
                to="/user-history" 
                className="inline-block px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Xem l·ªãch s·ª≠
              </Link>
            </div>
          </div>
        )}

        {status === 'failed' && (
          <div>
            <p className="text-red-600 font-semibold mb-2">{message}</p>
            <div className="mt-3">
              <Link to="/" className="text-blue-600 hover:underline mr-4">Quay v·ªÅ</Link>
              <button onClick={() => window.location.reload()} className="text-gray-700 underline">Th·ª≠ l·∫°i</button>
            </div>
          </div>
        )}

        {status === 'not_found' && (
          <div>
            <p className="text-yellow-700 mb-2">{message}</p>
            <p className="text-sm text-gray-500">C√≥ th·ªÉ backend ch∆∞a nh·∫≠n ƒë∆∞·ª£c IPN t·ª´ MoMo. ƒê·ª£i v√†i gi√¢y v√† l√†m m·ªõi trang.</p>
            <div className="mt-3">
              <button onClick={() => window.location.reload()} className="text-gray-700 underline">L√†m m·ªõi</button>
            </div>
          </div>
        )}

        {status === 'error' && (
          <div>
            <p className="text-red-600 mb-2">{message}</p>
            <p className="text-sm text-gray-500">Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn.</p>
          </div>
        )}
      </div>
    </div>
  );
}
