import { Station } from '../data/mockDatabase';

export type StationStatusType = 'available' | 'limited' | 'full' | 'maintenance';

export interface StationStatusInfo {
  status: StationStatusType;
  color: string;
  bgColor: string;
  textColor: string;
  label: string;
  icon: string;
}

/**
 * X√°c ƒë·ªãnh tr·∫°ng th√°i tr·∫°m s·∫°c d·ª±a tr√™n:
 * - S·ªë ch·ªó c√≤n tr·ªëng
 * - Tr·∫°ng th√°i b·∫£o tr√¨
 * - Xe s·∫Øp s·∫°c xong (d·ª± ki·∫øn trong 10 ph√∫t)
 */
export function getStationStatus(station: Station): StationStatusInfo {
  // Ki·ªÉm tra n·∫øu ƒëang b·∫£o tr√¨ ho·∫∑c x√¢y d·ª±ng
  if (station.status === 'maintenance' || station.status === 'offline') {
    return {
      status: 'maintenance',
      color: '#9ca3af', // gray-400
      bgColor: 'bg-gray-100',
      textColor: 'text-gray-800',
      label: 'B·∫£o tr√¨',
      icon: 'üîß'
    };
  }

  // T√≠nh t·ª∑ l·ªá ch·ªó tr·ªëng
  const availabilityRate = station.available / station.total;
  
  // H·∫øt ch·ªó
  if (station.available === 0) {
    // Ki·ªÉm tra xem c√≥ xe n√†o s·∫Øp s·∫°c xong kh√¥ng (trong v√≤ng 10 ph√∫t)
    const hasChargingSoon = checkChargingSoon(station);
    
    if (hasChargingSoon) {
      return {
        status: 'limited',
        color: '#eab308', // yellow-500
        bgColor: 'bg-yellow-100',
        textColor: 'text-yellow-800',
        label: 'S·∫Øp c√≥ ch·ªó',
        icon: '‚è≥'
      };
    }
    
    return {
      status: 'full',
      color: '#ef4444', // red-500
      bgColor: 'bg-red-100',
      textColor: 'text-red-800',
      label: 'H·∫øt ch·ªó',
      icon: 'üî¥'
    };
  }

  // C√≤n √≠t ch·ªó (d∆∞·ªõi 30%)
  if (availabilityRate <= 0.3) {
    return {
      status: 'limited',
      color: '#eab308', // yellow-500
      bgColor: 'bg-yellow-100',
      textColor: 'text-yellow-800',
      label: 'S·∫Øp ƒë·∫ßy',
      icon: '‚ö†Ô∏è'
    };
  }

  // C√≤n nhi·ªÅu ch·ªó
  return {
    status: 'available',
    color: '#22c55e', // green-500
    bgColor: 'bg-green-100',
    textColor: 'text-green-800',
    label: 'C√≤n ch·ªó',
    icon: '‚úÖ'
  };
}

/**
 * Ki·ªÉm tra xem c√≥ xe n√†o s·∫Øp s·∫°c xong trong 10 ph√∫t kh√¥ng
 */
function checkChargingSoon(station: Station): boolean {
  // N·∫øu c√≥ chargingPoints, ki·ªÉm tra th·ªùi gian c√≤n l·∫°i
  if (station.chargingPoints && station.chargingPoints.length > 0) {
    return station.chargingPoints.some(point => 
      point.status === 'in-use' && 
      point.estimatedTimeRemaining !== undefined &&
      point.estimatedTimeRemaining <= 10
    );
  }
  
  // Gi·∫£ l·∫≠p: 20% kh·∫£ nƒÉng c√≥ xe s·∫Øp s·∫°c xong n·∫øu ƒë·∫ßy
  return Math.random() < 0.2;
}

/**
 * L·∫•y m√†u marker cho b·∫£n ƒë·ªì
 */
export function getMarkerColor(station: Station): string {
  const statusInfo = getStationStatus(station);
  return statusInfo.color;
}

/**
 * L·∫•y th√¥ng tin hi·ªÉn th·ªã cho badge
 */
export function getStatusBadgeClasses(station: Station): string {
  const statusInfo = getStationStatus(station);
  return `${statusInfo.bgColor} ${statusInfo.textColor}`;
}

/**
 * L·∫•y label hi·ªÉn th·ªã
 */
export function getStatusLabel(station: Station): string {
  const statusInfo = getStationStatus(station);
  return statusInfo.label;
}

/**
 * L·∫•y icon cho tr·∫°ng th√°i
 */
export function getStatusIcon(station: Station): string {
  const statusInfo = getStationStatus(station);
  return statusInfo.icon;
}

/**
 * Ki·ªÉm tra xem c√≥ th·ªÉ ƒë·∫∑t ch·ªó kh√¥ng
 */
export function canBookStation(station: Station): boolean {
  const statusInfo = getStationStatus(station);
  return statusInfo.status === 'available' || statusInfo.status === 'limited';
}
