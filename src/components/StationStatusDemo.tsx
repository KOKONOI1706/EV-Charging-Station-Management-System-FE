import React, { useState, useEffect } from 'react';
import { StationMapView } from './StationMapView';
import { mockStationsForDemo, injectDemoStations } from '../data/mockStationsDemo';
import { Station } from '../services/supabaseService';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { RefreshCw, MapPin } from 'lucide-react';

export const StationStatusDemo: React.FC = () => {
  const [demoStations, setDemoStations] = useState<Station[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [statusCounts, setStatusCounts] = useState({
    available: 0,
    full: 0,
    maintenance: 0,
    soonAvailable: 0,
    incompatible: 0,
    offline: 0
  });

  const loadDemoData = async () => {
    setIsLoading(true);
    try {
      const stations = await injectDemoStations();
      setDemoStations(stations);
      
      // T√≠nh to√°n th·ªëng k√™
      const counts = {
        available: 0,
        full: 0,
        maintenance: 0,
        soonAvailable: 0,
        incompatible: 0,
        offline: 0
      };

      stations.forEach(station => {
        if (station.status === 'maintenance') {
          counts.maintenance++;
        } else if (station.status === 'offline') {
          counts.offline++;
        } else if (station.available_spots === 0 && station.next_available_in_minutes && station.next_available_in_minutes <= 10) {
          counts.soonAvailable++;
        } else if (station.available_spots === 0) {
          counts.full++;
        } else if (station.available_spots > 0) {
          // Check compatibility (simplified)
          const isCompatible = !station.vehicle_compatibility || 
            station.vehicle_compatibility.some(v => v.toLowerCase().includes('tesla'));
          
          if (isCompatible) {
            counts.available++;
          } else {
            counts.incompatible++;
          }
        }
      });

      setStatusCounts(counts);
    } catch (error) {
      console.error('Error loading demo data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadDemoData();
  }, []);

  const statusInfo = [
    {
      label: 'C√≥ s·∫µn',
      color: 'bg-green-500',
      count: statusCounts.available,
      description: 'Tr·∫°m ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng v√† c√≥ ch·ªó tr·ªëng'
    },
    {
      label: 'ƒê√£ ƒë·∫ßy',
      color: 'bg-red-500',
      count: statusCounts.full,
      description: 'T·∫•t c·∫£ ƒëi·ªÉm s·∫°c ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng'
    },
    {
      label: 'S·∫Øp c√≥ ch·ªó',
      color: 'bg-yellow-500',
      count: statusCounts.soonAvailable,
      description: 'S·∫Ω c√≥ ch·ªó tr·ªëng trong v√≤ng 10 ph√∫t'
    },
    {
      label: 'B·∫£o tr√¨',
      color: 'bg-gray-500',
      count: statusCounts.maintenance,
      description: 'Tr·∫°m ƒëang trong qu√° tr√¨nh b·∫£o tr√¨'
    },
    {
      label: 'Kh√¥ng t∆∞∆°ng th√≠ch',
      color: 'bg-orange-500',
      count: statusCounts.incompatible,
      description: 'C√≥ ch·ªó nh∆∞ng kh√¥ng t∆∞∆°ng th√≠ch v·ªõi xe c·ªßa b·∫°n'
    },
    {
      label: 'T·∫°m ng·ª´ng',
      color: 'bg-gray-700',
      count: statusCounts.offline,
      description: 'Tr·∫°m t·∫°m th·ªùi kh√¥ng ho·∫°t ƒë·ªông'
    }
  ];

  return (
    <div className="h-screen flex flex-col">
      {/* Header with Demo Controls */}
      <div className="bg-white border-b p-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <MapPin className="h-6 w-6 text-blue-600" />
            <h1 className="text-2xl font-bold">Demo H·ªá Th·ªëng M√†u Tr·∫°m S·∫°c</h1>
          </div>
          <Button
            onClick={loadDemoData}
            disabled={isLoading}
            className="flex items-center gap-2"
          >
            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            {isLoading ? 'ƒêang t·∫£i...' : 'T·∫£i l·∫°i demo'}
          </Button>
        </div>

        {/* Status Legend */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
          {statusInfo.map((info, index) => (
            <Card key={index} className="p-3">
              <div className="flex items-center gap-2 mb-2">
                <div className={`w-4 h-4 rounded-full ${info.color}`}></div>
                <span className="font-semibold text-sm">{info.label}</span>
              </div>
              <div className="text-2xl font-bold text-gray-800 mb-1">
                {info.count}
              </div>
              <div className="text-xs text-gray-600 leading-tight">
                {info.description}
              </div>
            </Card>
          ))}
        </div>

        {/* Demo Information */}
        <div className="mt-4 p-3 bg-blue-50 rounded-lg">
          <h3 className="font-semibold text-blue-800 mb-2">üìç Quy t·∫Øc m√†u hi·ªÉn th·ªã:</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-blue-700">
            <div>‚Ä¢ <span className="font-medium">Xanh l√°:</span> C√≥ ch·ªó v√† t∆∞∆°ng th√≠ch</div>
            <div>‚Ä¢ <span className="font-medium">ƒê·ªè:</span> ƒê√£ h·∫øt ch·ªó</div>
            <div>‚Ä¢ <span className="font-medium">V√†ng:</span> S·∫Øp c√≥ ch·ªó (‚â§10 ph√∫t)</div>
            <div>‚Ä¢ <span className="font-medium">Cam:</span> C√≥ ch·ªó nh∆∞ng kh√¥ng t∆∞∆°ng th√≠ch</div>
            <div>‚Ä¢ <span className="font-medium">X√°m:</span> B·∫£o tr√¨ ho·∫∑c t·∫°m ng·ª´ng</div>
            <div>‚Ä¢ <span className="font-medium">Popup:</span> Click marker ƒë·ªÉ xem chi ti·∫øt</div>
          </div>
        </div>
      </div>

      {/* Map View */}
      <div className="flex-1">
        <StationMapView
          stations={demoStations}
          onStationSelect={() => {}}
          selectedStation={null}
          userLocation={{ lat: 10.8515, lng: 106.7717 }} // Th·ªß ƒê·ª©c, TP.HCM
        />
      </div>
    </div>
  );
};

export default StationStatusDemo;