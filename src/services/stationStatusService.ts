import { Station } from './supabaseService';

export interface StationStatusResult {
  color: string;
  status: 'available' | 'full' | 'maintenance' | 'soon_available';
  statusText: string;
  description: string;
  priority: number;
}

export interface ChargingPoint {
  id: string;
  station_id: string;
  connector_type: string;
  power_kw: number;
  status: 'available' | 'occupied' | 'maintenance' | 'reserved';
  current_user_id?: string;
  estimated_completion_time?: string;
  vehicle_type_compatibility: string[];
}

export class StationStatusService {
  
  /**
   * X√°c ƒë·ªãnh tr·∫°ng th√°i v√† m√†u s·∫Øc c·ªßa tr·∫°m s·∫°c theo quy t·∫Øc business
   */
  static getStationDisplayStatus(station: Station, userVehicleType?: string): StationStatusResult {
    // Rule 1: Tr·∫°m b·∫£o tr√¨ -> M√†u x√°m
    if (station.status === 'maintenance') {
      return {
        color: '#6b7280', // gray-500
        status: 'maintenance',
        statusText: 'ƒêang b·∫£o tr√¨',
        description: 'Tr·∫°m hi·ªán ƒëang ƒë∆∞·ª£c b·∫£o tr√¨ v√† kh√¥ng th·ªÉ s·ª≠ d·ª•ng',
        priority: 4
      };
    }

    // Rule 2: Tr·∫°m offline -> M√†u x√°m ƒë·∫≠m
    if (station.status === 'offline') {
      return {
        color: '#374151', // gray-700
        status: 'maintenance',
        statusText: 'T·∫°m ng·ª´ng ho·∫°t ƒë·ªông',
        description: 'Tr·∫°m hi·ªán kh√¥ng ho·∫°t ƒë·ªông',
        priority: 5
      };
    }

    // Rule 3: Tr·∫°m ƒë·∫ßy nh∆∞ng s·∫Øp c√≥ ch·ªó -> M√†u v√†ng
    if (station.available_spots === 0 && station.next_available_in_minutes && station.next_available_in_minutes <= 10) {
      return {
        color: '#eab308', // yellow-500
        status: 'soon_available',
        statusText: 'S·∫Øp c√≥ ch·ªó',
        description: `D·ª± ki·∫øn c√≥ ch·ªó trong ${station.next_available_in_minutes} ph√∫t`,
        priority: 2
      };
    }

    // Rule 4: Tr·∫°m ƒë·∫ßy -> M√†u ƒë·ªè
    if (station.available_spots === 0) {
      return {
        color: '#dc2626', // red-600
        status: 'full',
        statusText: 'ƒê√£ ƒë·∫ßy',
        description: 'T·∫•t c·∫£ ch·ªó s·∫°c ƒë·ªÅu ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng',
        priority: 3
      };
    }

    // Rule 5: Tr·∫°m c√≥ ch·ªó ph√π h·ª£p v·ªõi xe -> M√†u xanh l√°
    if (station.available_spots > 0 && station.status === 'active') {
      const isCompatible = this.checkVehicleCompatibility(station, userVehicleType);
      
      if (isCompatible) {
        return {
          color: '#16a34a', // green-600
          status: 'available',
          statusText: 'C√≥ s·∫µn',
          description: `${station.available_spots}/${station.total_spots} ch·ªó c√≤n tr·ªëng`,
          priority: 1
        };
      } else {
        // C√≥ ch·ªó nh∆∞ng kh√¥ng ph√π h·ª£p v·ªõi lo·∫°i xe
        return {
          color: '#f59e0b', // amber-500
          status: 'available',
          statusText: 'Kh√¥ng t∆∞∆°ng th√≠ch',
          description: 'C√≥ ch·ªó tr·ªëng nh∆∞ng kh√¥ng ph√π h·ª£p v·ªõi lo·∫°i xe c·ªßa b·∫°n',
          priority: 2
        };
      }
    }

    // Default fallback
    return {
      color: '#6b7280', // gray-500
      status: 'maintenance',
      statusText: 'Kh√¥ng x√°c ƒë·ªãnh',
      description: 'Tr·∫°ng th√°i tr·∫°m ch∆∞a ƒë∆∞·ª£c x√°c ƒë·ªãnh',
      priority: 4
    };
  }

  /**
   * Ki·ªÉm tra t√≠nh t∆∞∆°ng th√≠ch c·ªßa tr·∫°m v·ªõi lo·∫°i xe
   */
  private static checkVehicleCompatibility(station: Station, userVehicleType?: string): boolean {
    if (!userVehicleType || !station.vehicle_compatibility) {
      return true; // M·∫∑c ƒë·ªãnh t∆∞∆°ng th√≠ch n·∫øu kh√¥ng c√≥ th√¥ng tin
    }

    return station.vehicle_compatibility.some(compatibility => 
      compatibility.toLowerCase().includes(userVehicleType.toLowerCase())
    );
  }

  /**
   * T·∫°o marker HTML cho Leaflet v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
   */
  static createStationMarkerHTML(station: Station, userVehicleType?: string): string {
    const statusInfo = this.getStationDisplayStatus(station, userVehicleType);
    
    return `
      <div style="
        background-color: ${statusInfo.color};
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 14px;
        position: relative;
      ">
        ${this.getStationIcon(statusInfo.status)}
        ${this.getStatusIndicator(statusInfo.status)}
      </div>
    `;
  }

  /**
   * L·∫•y icon ph√π h·ª£p cho tr·∫°ng th√°i
   */
  private static getStationIcon(status: string): string {
    switch (status) {
      case 'available': return '‚ö°';
      case 'full': return 'üî¥';
      case 'maintenance': return 'üîß';
      case 'soon_available': return '‚è±Ô∏è';
      default: return '‚ö°';
    }
  }

  /**
   * T·∫°o indicator nh·ªè cho tr·∫°ng th√°i ƒë·∫∑c bi·ªát
   */
  private static getStatusIndicator(status: string): string {
    if (status === 'soon_available') {
      return `
        <div style="
          position: absolute;
          top: -2px;
          right: -2px;
          width: 8px;
          height: 8px;
          background-color: #fbbf24;
          border-radius: 50%;
          border: 1px solid white;
        "></div>
      `;
    }
    return '';
  }

  /**
   * T·∫°o popup content chi ti·∫øt cho marker
   */
  static createStationPopupContent(station: Station, userVehicleType?: string): string {
    const statusInfo = this.getStationDisplayStatus(station, userVehicleType);
    
    return `
      <div style="min-width: 280px; font-family: system-ui;">
        <div style="border-bottom: 2px solid ${statusInfo.color}; padding-bottom: 8px; margin-bottom: 8px;">
          <h3 style="margin: 0; font-size: 18px; font-weight: bold; color: #1f2937;">
            ${station.name}
          </h3>
          <div style="display: flex; align-items: center; margin-top: 4px;">
            <span style="
              background-color: ${statusInfo.color};
              color: white;
              padding: 2px 8px;
              border-radius: 12px;
              font-size: 12px;
              font-weight: bold;
            ">
              ${statusInfo.statusText}
            </span>
          </div>
        </div>
        
        <div style="margin-bottom: 12px;">
          <p style="margin: 0; color: #6b7280; font-size: 14px;">üìç ${station.address}</p>
          <p style="margin: 4px 0; color: #374151; font-size: 14px;">
            <strong>${statusInfo.description}</strong>
          </p>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin-bottom: 12px; font-size: 13px;">
          <div>
            <strong>Ch·ªó s·∫°c:</strong><br>
            <span style="color: ${statusInfo.color}; font-weight: bold;">
              ${station.available_spots}/${station.total_spots} c√≥ s·∫µn
            </span>
          </div>
          <div>
            <strong>C√¥ng su·∫•t:</strong><br>
            ${station.power_kw}kW ${this.getChargerTypeIcon(station.charger_type)}
          </div>
          <div>
            <strong>Gi√°:</strong><br>
            <span style="color: #16a34a; font-weight: bold;">$${station.price_per_kwh}/kWh</span>
          </div>
          <div>
            <strong>ƒê√°nh gi√°:</strong><br>
            <span style="color: #f59e0b;">‚≠ê ${station.rating}/5.0</span>
          </div>
        </div>

        ${this.getAdditionalInfo(station, statusInfo)}

        <div style="margin-top: 12px; text-align: center;">
          <button 
            onclick="window.selectStation && window.selectStation('${station.id}')"
            style="
              background: ${statusInfo.status === 'available' ? '#16a34a' : '#6b7280'};
              color: white;
              border: none;
              padding: 8px 16px;
              border-radius: 6px;
              cursor: ${statusInfo.status === 'available' ? 'pointer' : 'not-allowed'};
              font-size: 14px;
              font-weight: bold;
              width: 100%;
              transition: all 0.2s;
            "
            ${statusInfo.status !== 'available' ? 'disabled' : ''}
          >
            ${this.getButtonText(statusInfo.status)}
          </button>
        </div>
      </div>
    `;
  }

  /**
   * L·∫•y th√¥ng tin b·ªï sung cho popup
   */
  private static getAdditionalInfo(station: Station, statusInfo: StationStatusResult): string {
    let additionalInfo = '';

    // Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi
    if (station.last_updated) {
      const lastUpdated = new Date(station.last_updated);
      const now = new Date();
      const diffMinutes = Math.floor((now.getTime() - lastUpdated.getTime()) / (1000 * 60));
      
      additionalInfo += `
        <div style="font-size: 12px; color: #6b7280; margin-bottom: 8px;">
          C·∫≠p nh·∫≠t: ${diffMinutes < 1 ? 'v·ª´a xong' : `${diffMinutes} ph√∫t tr∆∞·ªõc`}
        </div>
      `;
    }

    // Th√¥ng tin th·ªùi gian ch·ªù cho tr·∫°ng th√°i s·∫Øp c√≥ ch·ªó
    if (statusInfo.status === 'soon_available' && station.estimated_completion_times?.length) {
      const nextTimes = station.estimated_completion_times.slice(0, 3).join(', ');
      additionalInfo += `
        <div style="
          background-color: #fef3c7;
          border: 1px solid #f59e0b;
          border-radius: 4px;
          padding: 6px;
          margin-bottom: 8px;
          font-size: 12px;
        ">
          <strong>‚è∞ Th·ªùi gian d·ª± ki·∫øn:</strong><br>
          ${nextTimes} ph√∫t
        </div>
      `;
    }

    // Th√¥ng tin t∆∞∆°ng th√≠ch xe
    if (station.vehicle_compatibility?.length) {
      additionalInfo += `
        <div style="margin-bottom: 8px;">
          <strong style="font-size: 12px;">T∆∞∆°ng th√≠ch:</strong><br>
          <div style="display: flex; flex-wrap: wrap; gap: 2px; margin-top: 2px;">
            ${station.vehicle_compatibility.map(compat => 
              `<span style="
                background-color: #e5e7eb;
                color: #374151;
                padding: 1px 4px;
                border-radius: 3px;
                font-size: 10px;
              ">${compat}</span>`
            ).join('')}
          </div>
        </div>
      `;
    }

    return additionalInfo;
  }

  /**
   * L·∫•y icon cho lo·∫°i s·∫°c
   */
  private static getChargerTypeIcon(chargerType: string): string {
    if (chargerType?.toLowerCase().includes('ultra')) return '‚ö°‚ö°‚ö°';
    if (chargerType?.toLowerCase().includes('fast')) return '‚ö°‚ö°';
    return '‚ö°';
  }

  /**
   * L·∫•y text cho button
   */
  private static getButtonText(status: string): string {
    switch (status) {
      case 'available': return 'Ch·ªçn tr·∫°m n√†y';
      case 'full': return 'ƒê√£ h·∫øt ch·ªó';
      case 'maintenance': return 'Kh√¥ng kh·∫£ d·ª•ng';
      case 'soon_available': return 'ƒê·∫∑t ch·ªó ch·ªù';
      default: return 'Kh√¥ng kh·∫£ d·ª•ng';
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i realtime cho tr·∫°m
   */
  static async updateStationRealTimeStatus(stationId: string): Promise<Station | null> {
    // Simulate real-time update
    // In production, this would call an API
    const mockUpdate = {
      last_updated: new Date().toISOString(),
      next_available_in_minutes: Math.random() > 0.7 ? Math.floor(Math.random() * 15) : undefined
    };

    return mockUpdate as any;
  }

  /**
   * T√≠nh to√°n th·ªùi gian ch·ªù d·ª± ki·∫øn
   */
  static calculateEstimatedWaitTime(currentUsers: number, avgChargingTime: number = 45): number {
    return currentUsers * avgChargingTime;
  }
}

/**
 * Service ri√™ng cho Charging Points (ƒëi·ªÉm s·∫°c c·ª• th·ªÉ)
 */
export class ChargingPointService {
  
  /**
   * L·∫•y tr·∫°ng th√°i c·ªßa t·ª´ng ƒëi·ªÉm s·∫°c trong tr·∫°m
   */
  static getChargingPointStatus(point: ChargingPoint): StationStatusResult {
    switch (point.status) {
      case 'available':
        return {
          color: '#16a34a',
          status: 'available',
          statusText: 'C√≥ s·∫µn',
          description: `${point.connector_type} - ${point.power_kw}kW`,
          priority: 1
        };
      
      case 'occupied':
        const timeLeft = point.estimated_completion_time 
          ? this.getTimeUntilCompletion(point.estimated_completion_time)
          : null;
        
        return {
          color: '#dc2626',
          status: 'full',
          statusText: 'ƒêang s·ª≠ d·ª•ng',
          description: timeLeft ? `C√≤n ${timeLeft} ph√∫t` : 'ƒêang s·∫°c',
          priority: 3
        };
      
      case 'reserved':
        return {
          color: '#f59e0b',
          status: 'soon_available',
          statusText: 'ƒê√£ ƒë·∫∑t ch·ªó',
          description: 'C√≥ ng∆∞·ªùi ƒë·∫∑t tr∆∞·ªõc',
          priority: 2
        };
      
      case 'maintenance':
        return {
          color: '#6b7280',
          status: 'maintenance',
          statusText: 'B·∫£o tr√¨',
          description: 'ƒêang ƒë∆∞·ª£c s·ª≠a ch·ªØa',
          priority: 4
        };
      
      default:
        return {
          color: '#6b7280',
          status: 'maintenance',
          statusText: 'Kh√¥ng r√µ',
          description: 'Tr·∫°ng th√°i ch∆∞a x√°c ƒë·ªãnh',
          priority: 4
        };
    }
  }

  /**
   * T√≠nh th·ªùi gian c√≤n l·∫°i ƒë·∫øn khi ho√†n th√†nh
   */
  private static getTimeUntilCompletion(estimatedCompletion: string): number {
    const completion = new Date(estimatedCompletion);
    const now = new Date();
    const diffMs = completion.getTime() - now.getTime();
    return Math.max(0, Math.floor(diffMs / (1000 * 60)));
  }

  /**
   * T·∫°o marker cho charging point c·ª• th·ªÉ
   */
  static createChargingPointMarker(point: ChargingPoint, stationName: string): string {
    const status = this.getChargingPointStatus(point);
    
    return `
      <div style="
        background-color: ${status.color};
        width: 20px;
        height: 20px;
        border-radius: 4px;
        border: 2px solid white;
        box-shadow: 0 1px 4px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 10px;
      ">
        ${point.power_kw}
      </div>
    `;
  }
}